(set-info :original "/tmp/sea-yjrjj3_0/tpa.pp.ms.o.bc")
(set-info :authors "SeaHorn v.10.0.0-rc0")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry ())
(declare-rel main@empty.loop (Int ))
(declare-rel main@_1 (Int Int Int ))
(declare-rel main@orig.main.exit.split ())
(declare-var main@%_6_0 Bool )
(declare-var main@%_7_0 Bool )
(declare-var main@%_3_0 Bool )
(declare-var main@%_4_0 Int )
(declare-var main@%_5_0 Bool )
(declare-var main@%nd.loop.cond_0 Bool )
(declare-var main@%.0.i2_2 Int )
(declare-var main@%.01.i1_2 Int )
(declare-var main@%_0_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@%loop.bound_0 Int )
(declare-var main@empty.loop_0 Bool )
(declare-var main@empty.loop.body_0 Bool )
(declare-var main@empty.loop_1 Bool )
(declare-var main@_1_0 Bool )
(declare-var main@%.0.i2_0 Int )
(declare-var main@%.01.i1_0 Int )
(declare-var main@%.0.i2_1 Int )
(declare-var main@%.01.i1_1 Int )
(declare-var main@%_2_0 Int )
(declare-var main@%spec.select.i_0 Int )
(declare-var main@_1_1 Bool )
(declare-var main@orig.main.exit_0 Bool )
(declare-var main@orig.main.exit.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule main@entry)
(rule (=> (and main@entry
         true
         (= main@%_0_0 (= main@%loop.bound_0 199))
         main@%_0_0
         (=> main@empty.loop_0 (and main@empty.loop_0 main@entry_0))
         main@empty.loop_0)
    (main@empty.loop main@%loop.bound_0)))
(rule (=> (and (main@empty.loop main@%loop.bound_0)
         true
         (=> main@empty.loop.body_0
             (and main@empty.loop.body_0 main@empty.loop_0))
         (=> (and main@empty.loop.body_0 main@empty.loop_0)
             main@%nd.loop.cond_0)
         (=> main@empty.loop_1 (and main@empty.loop_1 main@empty.loop.body_0))
         main@empty.loop_1)
    (main@empty.loop main@%loop.bound_0)))
(rule (=> (and (main@empty.loop main@%loop.bound_0)
         true
         (=> main@_1_0 (and main@_1_0 main@empty.loop_0))
         (=> (and main@_1_0 main@empty.loop_0) (not main@%nd.loop.cond_0))
         (=> (and main@_1_0 main@empty.loop_0) (= main@%.0.i2_0 100))
         (=> (and main@_1_0 main@empty.loop_0) (= main@%.01.i1_0 0))
         (=> (and main@_1_0 main@empty.loop_0) (= main@%.0.i2_1 main@%.0.i2_0))
         (=> (and main@_1_0 main@empty.loop_0)
             (= main@%.01.i1_1 main@%.01.i1_0))
         main@_1_0)
    (main@_1 main@%.01.i1_1 main@%.0.i2_1 main@%loop.bound_0)))
(rule (=> (and (main@_1 main@%.01.i1_0 main@%.0.i2_0 main@%loop.bound_0)
         true
         (= main@%_2_0 (+ main@%.01.i1_0 1))
         (= main@%_3_0 (> main@%.01.i1_0 99))
         (= main@%_4_0 (ite main@%_3_0 1 0))
         (= main@%spec.select.i_0 (+ main@%.0.i2_0 main@%_4_0))
         (= main@%_5_0 (< main@%.01.i1_0 main@%loop.bound_0))
         (=> main@_1_1 (and main@_1_1 main@_1_0))
         (=> (and main@_1_1 main@_1_0) main@%_5_0)
         (=> (and main@_1_1 main@_1_0) (= main@%.0.i2_1 main@%spec.select.i_0))
         (=> (and main@_1_1 main@_1_0) (= main@%.01.i1_1 main@%_2_0))
         (=> (and main@_1_1 main@_1_0) (= main@%.0.i2_2 main@%.0.i2_1))
         (=> (and main@_1_1 main@_1_0) (= main@%.01.i1_2 main@%.01.i1_1))
         main@_1_1)
    (main@_1 main@%.01.i1_2 main@%.0.i2_2 main@%loop.bound_0)))
(rule (let ((a!1 (and (main@_1 main@%.01.i1_0 main@%.0.i2_0 main@%loop.bound_0)
                true
                (= main@%_2_0 (+ main@%.01.i1_0 1))
                (= main@%_3_0 (> main@%.01.i1_0 99))
                (= main@%_4_0 (ite main@%_3_0 1 0))
                (= main@%spec.select.i_0 (+ main@%.0.i2_0 main@%_4_0))
                (= main@%_5_0 (< main@%.01.i1_0 main@%loop.bound_0))
                (=> main@orig.main.exit_0 (and main@orig.main.exit_0 main@_1_0))
                (=> (and main@orig.main.exit_0 main@_1_0) (not main@%_5_0))
                (=> main@orig.main.exit_0
                    (= main@%_6_0 (= main@%spec.select.i_0 200)))
                (=> main@orig.main.exit_0 (not main@%_7_0))
                (=> main@orig.main.exit_0 main@%_6_0)
                (=> main@orig.main.exit.split_0
                    (and main@orig.main.exit.split_0 main@orig.main.exit_0))
                main@orig.main.exit.split_0)))
  (=> a!1 main@orig.main.exit.split)))
(query main@orig.main.exit.split)

